{"version":3,"sources":["logo.svg","Square.js","Grid.js","App.js","index.js"],"names":["module","exports","Square","updateGrid","firstIndex","secondIndex","value","turn","className","onClick","Grid","useState","gridValue","setGridValue","setTurn","winner","setWinner","draw","setDraw","newGrid","result","checkIfMatch","match","char","console","log","checkDraw","threePlaceCheck","item1","item2","item3","grid","isMatched","count","i","j","map","val","index","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7483ae5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction Square({ updateGrid, firstIndex, secondIndex, value, turn }) {\r\n  return (\r\n    <div className=\"block\" onClick={() => updateGrid(firstIndex, secondIndex, turn)}>\r\n      {value}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import React, { useState } from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nfunction Grid() {\r\n  //[[0,0,0],[0,0,O],[x,0,0]]\r\n  const [gridValue, setGridValue] = useState([\r\n    [0, 0, 0],\r\n    [0, 0, 0],\r\n    [0, 0, 0],\r\n  ]);\r\n\r\n  const [turn, setTurn] = useState(\"X\");\r\n  const [winner, setWinner] = useState(\"\");\r\n  const [draw, setDraw] = useState(false);\r\n\r\n  const updateGrid = (firstIndex, secondIndex, value) => {\r\n    if (winner || draw) {\r\n      return;\r\n    }\r\n    const newGrid = [...gridValue];\r\n    newGrid[firstIndex][secondIndex] = value;\r\n    setGridValue(newGrid);\r\n    const result = checkIfMatch(newGrid);\r\n    if (result.match === true) {\r\n      setWinner(result.char);\r\n      console.log(winner);\r\n    }\r\n    checkDraw();\r\n    //Update Turn\r\n    turn === \"X\" ? setTurn(\"O\") : setTurn(\"X\");\r\n  };\r\n\r\n  const resetGrid = () => {\r\n    setWinner(\"\");\r\n    setGridValue([\r\n      [0, 0, 0],\r\n      [0, 0, 0],\r\n      [0, 0, 0],\r\n    ]);\r\n    setTurn(\"X\");\r\n    setDraw(false);\r\n  };\r\n\r\n  const threePlaceCheck = (item1, item2, item3) => {\r\n    //Check if they are not 0\r\n\r\n    if (item1 === 0 || item2 === 0 || item3 === 0) {\r\n      return {\r\n        match: false,\r\n      };\r\n    }\r\n\r\n    // Check if they match\r\n    // if yes, return true and also the character\r\n    if (item1 === item2 && item2 === item3) {\r\n      return {\r\n        match: true,\r\n        char: item1,\r\n      };\r\n    }\r\n\r\n    // if no, return false\r\n    return {\r\n      match: false,\r\n    };\r\n  };\r\n\r\n  const checkIfMatch = (grid) => {\r\n    var isMatched;\r\n    // 00, 01, 02\r\n    isMatched = threePlaceCheck(grid[0][0], grid[0][1], grid[0][2]);\r\n    if (isMatched.match === true) {\r\n      return isMatched;\r\n    }\r\n    //10, 11, 12\r\n    isMatched = threePlaceCheck(grid[1][0], grid[1][1], grid[1][2]);\r\n    if (isMatched.match === true) {\r\n      return isMatched;\r\n    }\r\n\r\n    //20, 21, 22\r\n    isMatched = threePlaceCheck(grid[2][0], grid[2][1], grid[2][2]);\r\n    if (isMatched.match === true) {\r\n      return isMatched;\r\n    }\r\n\r\n    // 00, 10,20\r\n    isMatched = threePlaceCheck(grid[0][0], grid[1][0], grid[2][0]);\r\n    if (isMatched.match === true) {\r\n      return isMatched;\r\n    }\r\n    // 01, 11, 21\r\n    isMatched = threePlaceCheck(grid[0][1], grid[1][1], grid[2][1]);\r\n    if (isMatched.match === true) {\r\n      return isMatched;\r\n    }\r\n\r\n    // 02, 12, 22\r\n    isMatched = threePlaceCheck(grid[0][2], grid[1][2], grid[2][2]);\r\n    if (isMatched.match === true) {\r\n      return isMatched;\r\n    }\r\n\r\n    // 20, 11, 02\r\n    isMatched = threePlaceCheck(grid[2][0], grid[1][1], grid[0][2]);\r\n    if (isMatched.match === true) {\r\n      return isMatched;\r\n    }\r\n\r\n    // 00, 11, 22\r\n    isMatched = threePlaceCheck(grid[0][0], grid[1][1], grid[2][2]);\r\n    if (isMatched.match === true) {\r\n      return isMatched;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const checkDraw = () => {\r\n    let count = 0;\r\n    for (let i = 0; i < 3; i++) {\r\n      for (let j = 0; j < 3; j++) {\r\n        if (gridValue[i][j] == 0) {\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n    if (count > 0) {\r\n      setDraw(false);\r\n    } else {\r\n      setDraw(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{turn}'s Turn </h2>\r\n      <button className=\"reset\" onClick={() => resetGrid()}>\r\n        RESET\r\n      </button>\r\n\r\n      <div className=\"outer\">\r\n        <div className=\"row\">\r\n          {gridValue[0].map((val, index) => {\r\n            return (\r\n              <Square\r\n                key={\"0\" + index}\r\n                updateGrid={updateGrid}\r\n                firstIndex={0}\r\n                secondIndex={index}\r\n                value={val === 0 ? \"\" : val}\r\n                turn={turn}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"row\">\r\n          {gridValue[1].map((val, index) => {\r\n            return (\r\n              <Square\r\n                key={\"1\" + index}\r\n                updateGrid={updateGrid}\r\n                firstIndex={1}\r\n                secondIndex={index}\r\n                value={val === 0 ? \"\" : val}\r\n                turn={turn}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <div className=\"row\">\r\n          {gridValue[2].map((val, index) => {\r\n            return (\r\n              <Square\r\n                key={\"2\" + index}\r\n                updateGrid={updateGrid}\r\n                firstIndex={2}\r\n                secondIndex={index}\r\n                value={val === 0 ? \"\" : val}\r\n                turn={turn}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      {winner !== \"\" && <h3> Winner is {winner} !</h3>}\r\n      {draw && <h3> It's a draw :/ </h3>}\r\n    </div>\r\n  );\r\n}\r\nexport default Grid;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Grid from \"./Grid\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}